#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MissionAlertIndicator

#include "Basic.hpp"

#include "MissionAlertIndicator_classes.hpp"
#include "MissionAlertIndicator_parameters.hpp"


namespace SDK
{

// Function MissionAlertIndicator.MissionAlertIndicator_C.ToggleTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TDelegate<void()>                       K2Node_CreateDelegate_OutputDelegate                   (ZeroConstructor, NoDestructor)
// struct FTimerHandle                     CallFunc_K2_SetTimerDelegate_ReturnValue               (NoDestructor)

void UMissionAlertIndicator_C::ToggleTimer(bool IsEnabled, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionAlertIndicator_C", "ToggleTimer");

	Params::MissionAlertIndicator_C_ToggleTimer Parms{};

	Parms.IsEnabled = IsEnabled;
	Parms.K2Node_CreateDelegate_OutputDelegate = K2Node_CreateDelegate_OutputDelegate;
	Parms.CallFunc_K2_SetTimerDelegate_ReturnValue = std::move(CallFunc_K2_SetTimerDelegate_ReturnValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MissionAlertIndicator.MissionAlertIndicator_C.Update
// (Public, BlueprintCallable, BlueprintEvent)

void UMissionAlertIndicator_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionAlertIndicator_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MissionAlertIndicator.MissionAlertIndicator_C.Config
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            AlertVisualTags                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FGameplayTagQuery                CallFunc_MakeGameplayTagQuery_ReturnValue              ()
// bool                                    CallFunc_DoesContainerMatchTagQuery_ReturnValue        (ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSlateBrush                      CallFunc_Get_Mission_Alert_Visual_Icon_OutBrush        ()
// struct FLinearColor                     K2Node_MakeStruct_LinearColor                          (IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMissionAlertIndicator_C::Config(const struct FGameplayTagContainer& AlertVisualTags, const struct FGameplayTagQuery& CallFunc_MakeGameplayTagQuery_ReturnValue, bool CallFunc_DoesContainerMatchTagQuery_ReturnValue, const struct FSlateBrush& CallFunc_Get_Mission_Alert_Visual_Icon_OutBrush, const struct FLinearColor& K2Node_MakeStruct_LinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionAlertIndicator_C", "Config");

	Params::MissionAlertIndicator_C_Config Parms{};

	Parms.AlertVisualTags = std::move(AlertVisualTags);
	Parms.CallFunc_MakeGameplayTagQuery_ReturnValue = std::move(CallFunc_MakeGameplayTagQuery_ReturnValue);
	Parms.CallFunc_DoesContainerMatchTagQuery_ReturnValue = CallFunc_DoesContainerMatchTagQuery_ReturnValue;
	Parms.CallFunc_Get_Mission_Alert_Visual_Icon_OutBrush = std::move(CallFunc_Get_Mission_Alert_Visual_Icon_OutBrush);
	Parms.K2Node_MakeStruct_LinearColor = std::move(K2Node_MakeStruct_LinearColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MissionAlertIndicator.MissionAlertIndicator_C.Get Mission Alert Visual Icon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTagContainer            TagContainer                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FSlateBrush                      OutBrush                                               (Parm, OutParm)
// class UObject*                          MinibossAlertImage                                     (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          StormAlertImage                                        (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateBrush                      K2Node_MakeStruct_SlateBrush                           ()
// bool                                    CallFunc_HasTag_ReturnValue                            (ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CallFunc_HasTag_ReturnValue1                           (ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSlateBrush                      K2Node_MakeStruct_SlateBrush1                          ()

void UMissionAlertIndicator_C::Get_Mission_Alert_Visual_Icon(struct FGameplayTagContainer& TagContainer, struct FSlateBrush* OutBrush, class UObject* MinibossAlertImage, class UObject* StormAlertImage, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush, bool CallFunc_HasTag_ReturnValue, bool CallFunc_HasTag_ReturnValue1, const struct FSlateBrush& K2Node_MakeStruct_SlateBrush1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MissionAlertIndicator_C", "Get Mission Alert Visual Icon");

	Params::MissionAlertIndicator_C_Get_Mission_Alert_Visual_Icon Parms{};

	Parms.TagContainer = std::move(TagContainer);
	Parms.MinibossAlertImage = MinibossAlertImage;
	Parms.StormAlertImage = StormAlertImage;
	Parms.K2Node_MakeStruct_SlateBrush = std::move(K2Node_MakeStruct_SlateBrush);
	Parms.CallFunc_HasTag_ReturnValue = CallFunc_HasTag_ReturnValue;
	Parms.CallFunc_HasTag_ReturnValue1 = CallFunc_HasTag_ReturnValue1;
	Parms.K2Node_MakeStruct_SlateBrush1 = std::move(K2Node_MakeStruct_SlateBrush1);

	UObject::ProcessEvent(Func, &Parms);

	TagContainer = std::move(Parms.TagContainer);

	if (OutBrush != nullptr)
		*OutBrush = std::move(Parms.OutBrush);
}

}

